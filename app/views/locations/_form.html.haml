= form_for(@location) do |f|
  - if @location.errors.any?
    #error_explanation
      %h2
        = pluralize(@location.errors.count, "error")
        prohibited this location from being saved:
      %ul
        - @location.errors.full_messages.each do |message|
          %li= message
  .field
    = f.label :coordinates
    %br/
    %p= @location.coordinates
    %input{type:'hidden', name:'coordinates[]', value:@location.coordinates[0]} 
    %input{type:'hidden', name:'coordinates[]', value:@location.coordinates[1]} 
  .field
    = f.label :name
    %br/
    = f.text_field :name
  .actions
    = f.submit

.gallery.sort-mode{data:{location:@location.id}}
  %h2 Photos
  .button-toolbar
    .btn-group
      %button.btn.btn-default.dropdown-toggle{type:"button", data:{toggle:"dropdown"}, aria:{expanded:"false"}, title:'Import Photos'}
        %span.glyphicon.glyphicon-upload
      %ul.dropdown-menu{role:"menu"}
        %li
          %a.disk-import-trigger{href:"#"} From Disk
        %li
          %a.facebook-import-trigger{href:"#"} Facebook
        %li
          %a{href:"#"} Google+

    .mode-toggle.btn-radio-group.btn-group
      %label
        %input{type:'radio', name:'mode', checked:true}
        %span.btn.btn-default
          %i.glyphicon.glyphicon-move
      %label
        %input{type:'radio', name:'mode'}
        %span.btn.btn-default
          %i.glyphicon.glyphicon-ok-sign

    .batch-actions
      %button.btn.btn-danger.delete{disabled:true}
        %i.glyphicon.glyphicon-trash

      .btn-group
        %button.btn.btn-default.dropdown-toggle{type:"button", data:{toggle:"dropdown"}, aria:{expanded:"false"}, disabled:true}
          Move To
          %span.caret
        %ul.dropdown-menu{role:"menu"}
          - @locations.each do |loc|
            %li
              %a{href:"#", data:{location:{id:loc.id}}}= loc.name

  = form_tag sort_photos_path, class: 'sortable-gallery-form', remote: true do
    %ul.list-inline.photos.sortable
      - @location.photos.each do |photo|
        %li.photo{data:{id:photo.id}}
          %img{src:photo.photo.thumb_square_small.url}
          %input{type:"hidden", name:'photo_ids[]', value: photo.id}


  = form_for @location do |f|
    = f.s3_file_field :photos, :class => 'js-s3_file_field hidden-file-field', multiple: true #, :key => "/uploads/${timestamp}/${filename}"
    / .progress
    / .meter{ :style => "width: 0%" }


#album-browser.modal.fade
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{type:"button", data:{dismiss:"modal"}, aria:{label:"Close"}}
          %span{aria:{hidden:"true"}}&times;
        %h4.modal-title Modal title
      .modal-body
        %ul.albums.list-inline
      .modal-footer
        %button.btn.btn-default{type:"button", data:{dismiss:"modal"}} cancel


-# TODO: move to locations.js.coffee

:javascript
  
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '#{ENV["FB_APP_ID"]}',
      xfbml      : false,
      version    : 'v2.1'
    });
    console.log('init FB')
  };

  window.fbLogin = function(cb){
    FB.getLoginStatus(function(res) {
      if (res.status === 'connected') {
        cb();
      }
      else {
        FB.login(function(res){
          if(res.authResponse){
            cb();
          }
        },{scope : 'user_photos'});
      }
    });
  };

  (function(d, s, id){
     var js, fjs = d.getElementsByTagName(s)[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement(s); js.id = id;
     js.src = "//connect.facebook.net/en_US/sdk.js";
     fjs.parentNode.insertBefore(js, fjs);
   }(document, 'script', 'facebook-jssdk'));
